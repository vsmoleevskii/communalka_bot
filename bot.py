import telebot
from telebot import types
from secrets import secrets
from datetime import datetime

# Bot setup
token = secrets.get('BOT_API_TOKEN')
bot = telebot.TeleBot(token)

# Initial readings for November 2024
INITIAL_READINGS = {
    'üìä Water': 71,
    'üî• Gas': 1366
}

# Enhanced in-memory storage
user_readings = {}  # Store current readings
user_states = {}    # Store user states
confirmed_readings = {}  # Store confirmed readings after calculation {user_id: {month: {utility: reading}}}
calculation_history = {}  # Store calculation history

# Utility rates
RATES = {
    'üìä Water': 205.992,
    '‚ö° Day': 53.48,
    '‚ö° Night': 43.48,
    'üî• Gas': 143.7
}

class MonthManager:
    def __init__(self):
        self.months = {
            1: '–Ø–Ω–≤–∞—Ä—å',
            2: '–§–µ–≤—Ä–∞–ª—å',
            3: '–ú–∞—Ä—Ç',
            4: '–ê–ø—Ä–µ–ª—å',
            5: '–ú–∞–π',
            6: '–ò—é–Ω—å',
            7: '–ò—é–ª—å',
            8: '–ê–≤–≥—É—Å—Ç',
            9: '–°–µ–Ω—Ç—è–±—Ä—å',
            10: '–û–∫—Ç—è–±—Ä—å',
            11: '–ù–æ—è–±—Ä—å',
            12: '–î–µ–∫–∞–±—Ä—å'
        }
        self.current_month = 12  # Start with December 2024
        self.current_year = 2024

    def get_current_month(self):
        return self.months[self.current_month]

    def get_previous_month(self):
        if self.current_month == 1:  # January
            return '–î–µ–∫–∞–±—Ä—å'
        else:
            prev_month = self.current_month - 1
            return self.months[prev_month]
        
    def get_current_year(self):
        return self.current_year
        
    def advance_month(self):
        if self.current_month == 12:  # December to January
            self.current_month = 1
            self.current_year = 2025
        elif self.current_month < 12:  # Any other month
            self.current_month += 1

month_manager = MonthManager()

def create_markup():
    """Create keyboard markup with utility options"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    water_btn = types.KeyboardButton('üìä Water')
    electricity_day_btn = types.KeyboardButton('‚ö° Day')
    electricity_night_btn = types.KeyboardButton('‚ö° Night')
    gas_btn = types.KeyboardButton('üî• Gas')
    calculate_btn = types.KeyboardButton('üí∞ Calculate')
    preview_btn = types.KeyboardButton('üëÄ Preview')
    history_btn = types.KeyboardButton('üìú History')
    markup.row(water_btn)
    markup.row(electricity_day_btn, electricity_night_btn)
    markup.row(gas_btn)
    markup.row(preview_btn, calculate_btn)
    markup.row(history_btn)
    return markup

def get_previous_reading(user_id, utility_type):
    """Get previous month's reading for utility"""
    # For first time electricity readings
    if utility_type in ['‚ö° Day', '‚ö° Night']:
        if user_id not in confirmed_readings:
            return None
        for month_data in reversed(list(confirmed_readings[user_id].values())):
            if utility_type in month_data:
                return month_data[utility_type]
        return None
    
    # For other utilities
    if user_id in confirmed_readings:
        # Look for the most recent confirmed reading
        for month_data in reversed(list(confirmed_readings[user_id].values())):
            if utility_type in month_data:
                return month_data[utility_type]
    
    # If no confirmed readings found, return initial reading
    return INITIAL_READINGS.get(utility_type, 0)

@bot.message_handler(commands=['start'])
def start_message(message):
    current_month = month_manager.get_current_month()
    current_year = month_manager.get_current_year()
    
    welcome_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á–µ—Ç–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥!

–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {current_month} {current_year}

–ü–æ–∫–∞–∑–∞–Ω–∏—è –∑–∞ –Ω–æ—è–±—Ä—å 2024:
üìä Water: {INITIAL_READINGS['üìä Water']}
‚ö° Day/Night: –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
üî• Gas: {INITIAL_READINGS['üî• Gas']}

–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:

üìä Water - –ü–æ–∫–∞–∑–∞–Ω–∏—è –≤–æ–¥—ã (–¥—Ä–∞–º/–º3)
‚ö° Day - –ü–æ–∫–∞–∑–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ (–¥—Ä–∞–º/–∫–í—Ç)
‚ö° Night - –ü–æ–∫–∞–∑–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞ –Ω–æ—á–Ω–æ–π —Ç–∞—Ä–∏—Ñ (–¥—Ä–∞–º/–∫–í—Ç)
üî• Gas - –ü–æ–∫–∞–∑–∞–Ω–∏—è –≥–∞–∑–∞ (–¥—Ä–∞–º/–º3)
üí∞ Calculate - –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É
üìú History - –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤
    """
    bot.send_message(message.chat.id, welcome_text, reply_markup=create_markup())
    
    # Initialize storage for this user
    if message.chat.id not in user_readings:
        user_readings[message.chat.id] = {}
    if message.chat.id not in calculation_history:
        calculation_history[message.chat.id] = []

@bot.message_handler(commands=['help'])
def help_message(message):
    current_month = month_manager.get_current_month()
    current_year = month_manager.get_current_year()
    help_text = f"""
üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {current_month} {current_year}

1. –í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤:
   üìä Water - –í–æ–¥–∞ (205.992 –¥—Ä–∞–º/–º3)
   ‚ö° Day - –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω—å (53.48 –¥—Ä–∞–º/–∫–í—Ç)
   ‚ö° Night - –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á—å (43.48 –¥—Ä–∞–º/–∫–í—Ç)
   üî• Gas - –ì–∞–∑ (143.7 –¥—Ä–∞–º/–º3)

2. –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Ä–∞–∑–Ω–∏—Ü–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º

3. –ù–∞–∂–º–∏—Ç–µ üí∞ Calculate –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã

/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    """
    bot.send_message(message.chat.id, help_text)

def validate_reading(text):
    """Validate that the reading is a positive number"""
    try:
        reading = float(text)
        if reading < 0:
            return False, "–ü–æ–∫–∞–∑–∞–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏"
        if reading > 99999:
            return False, "–ü–æ–∫–∞–∑–∞–Ω–∏—è –∫–∞–∂—É—Ç—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º–∏"
        return True, reading
    except ValueError:
        return False, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ"

@bot.message_handler(func=lambda message: message.text == 'üí∞ Calculate')
def handle_calculation(message):
    if message.chat.id in user_states:
        del user_states[message.chat.id]
        
    if message.chat.id not in user_readings or not user_readings[message.chat.id]:
        bot.reply_to(message, "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞!")
        return

    current_month = month_manager.get_current_month()
    current_year = month_manager.get_current_year()
    
    # Calculate consumptions based on previous confirmed readings
    consumptions = {}
    readings = user_readings[message.chat.id]
    response = f"üí∞ –†–∞—Å—á–µ—Ç –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ {current_month} {current_year}:\n\n"
    total = 0

    for utility, current_reading in readings.items():
        previous_reading = get_previous_reading(message.chat.id, utility)
        consumption = current_reading - (previous_reading or 0)
        consumptions[utility] = consumption
        cost = consumption * RATES[utility]
        response += f"{utility}: {consumption} √ó {RATES[utility]} = {cost:.2f} –¥—Ä–∞–º\n"
        total += cost

    response += f"\nüìä –û–±—â–∞—è —Å—É–º–º–∞: {total:.2f} –¥—Ä–∞–º"

    # Store confirmed readings
    if message.chat.id not in confirmed_readings:
        confirmed_readings[message.chat.id] = {}
    month_key = f"{current_month} {current_year}"
    confirmed_readings[message.chat.id][month_key] = readings.copy()
    
    # Store calculation in history
    timestamp = datetime.now().strftime('%d.%m.%Y %H:%M')
    calculation = {
        'timestamp': timestamp,
        'month': month_key,
        'readings': consumptions,
        'total': total
    }
    
    if message.chat.id not in calculation_history:
        calculation_history[message.chat.id] = []
    
    calculation_history[message.chat.id].append(calculation)
    calculation_history[message.chat.id] = calculation_history[message.chat.id][-5:]
    
    bot.reply_to(message, response)
    
    # Clear current readings and advance month
    user_readings[message.chat.id] = {}
    month_manager.advance_month()

# Add preview calculation handler
@bot.message_handler(func=lambda message: message.text == 'üëÄ Preview')
def handle_preview(message):
    if message.chat.id in user_states:
        del user_states[message.chat.id]
        
    if message.chat.id not in user_readings or not user_readings[message.chat.id]:
        bot.reply_to(message, "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞!")
        return

    current_month = month_manager.get_current_month()
    current_year = month_manager.get_current_year()
    
    # Calculate consumptions based on previous confirmed readings
    consumptions = {}
    readings = user_readings[message.chat.id]
    response = f"üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∑–∞ {current_month} {current_year}:\n\n"
    total = 0

    for utility, current_reading in readings.items():
        previous_reading = get_previous_reading(message.chat.id, utility)
        consumption = current_reading - (previous_reading or 0)
        consumptions[utility] = consumption
        cost = consumption * RATES[utility]
        response += f"{utility}: {consumption} √ó {RATES[utility]} = {cost:.2f} –¥—Ä–∞–º\n"
        total += cost

    response += f"\nüìä –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞: {total:.2f} –¥—Ä–∞–º\n"
    response += "\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É –Ω–∞–∂–º–∏—Ç–µ 'üí∞ Calculate'"

    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: message.text == 'üìú History')
def show_history(message):
    # Clear any existing state
    if message.chat.id in user_states:
        del user_states[message.chat.id]
        
    if message.chat.id not in calculation_history or not calculation_history[message.chat.id]:
        bot.reply_to(message, "üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ –ø—É—Å—Ç–∞")
        return

    response = "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤:\n\n"
    for calc in reversed(calculation_history[message.chat.id]):
        response += f"üïí {calc['timestamp']} ({calc['month']})\n"
        for utility, consumption in calc['readings'].items():
            cost = consumption * RATES[utility]
            response += f"{utility}: {consumption} √ó {RATES[utility]} = {cost:.2f} –¥—Ä–∞–º\n"
        response += f"–ò—Ç–æ–≥–æ: {calc['total']:.2f} –¥—Ä–∞–º\n\n"

    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: message.text in ['üìä Water', '‚ö° Day', '‚ö° Night', 'üî• Gas'])
def handle_reading_selection(message):
    reading_type = message.text
    current_month = month_manager.get_current_month()
    current_year = month_manager.get_current_year()
    previous_reading = get_previous_reading(message.chat.id, reading_type)
    
    user_states[message.chat.id] = reading_type
    
    if reading_type in ['‚ö° Day', '‚ö° Night'] and previous_reading is None:
        bot.reply_to(message, 
                    f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è {reading_type} –∑–∞ {current_month} {current_year}:\n"
                    f"–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è: –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    else:
        bot.reply_to(message, 
                    f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è {reading_type} –∑–∞ {current_month} {current_year}:\n"
                    f"–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è: {previous_reading}")

@bot.message_handler(func=lambda message: message.chat.id in user_states and message.text not in ['üí∞ Calculate', 'üìú History'])
def handle_reading_input(message):
    reading_type = user_states[message.chat.id]
    is_valid, current_reading = validate_reading(message.text)
    
    if not is_valid:
        bot.reply_to(message, f"‚ùå {current_reading}")
        return

    if message.chat.id not in user_readings:
        user_readings[message.chat.id] = {}
    
    previous_reading = get_previous_reading(message.chat.id, reading_type)
    
    if reading_type in ['‚ö° Day', '‚ö° Night'] and previous_reading is None:
        response = f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è {reading_type} –ø—Ä–∏–Ω—è—Ç—ã: {current_reading}\n"
        response += "–†–∞—Å—Ö–æ–¥ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞"
        user_readings[message.chat.id][reading_type] = current_reading  # Store current reading
        bot.reply_to(message, response)
        del user_states[message.chat.id]
        return
    
    consumption = current_reading - previous_reading
    
    if consumption < 0:
        bot.reply_to(message, "‚ùå –ù–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö!")
        return
    
    # Store current reading and calculate consumption
    user_readings[message.chat.id][reading_type] = current_reading  # Store the actual reading
    
    cost = consumption * RATES[reading_type]
    current_month = month_manager.get_current_month()
    current_year = month_manager.get_current_year()
    response = f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è {reading_type} –∑–∞ {current_month} {current_year} –ø—Ä–∏–Ω—è—Ç—ã:\n"
    response += f"–ü—Ä–µ–¥—ã–¥—É—â–∏–µ: {previous_reading}\n"
    response += f"–¢–µ–∫—É—â–∏–µ: {current_reading}\n"
    response += f"–†–∞—Å—Ö–æ–¥: {consumption}\n"
    response += f"–°—É–º–º–∞: {cost:.2f} –¥—Ä–∞–º"
    
    bot.reply_to(message, response)
    del user_states[message.chat.id]

# Handle unknown commands last
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    if message.chat.id in user_states:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    else:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ /help")

# Start the bot
if __name__ == '__main__':
    print("Bot started...")
    bot.polling(none_stop=True, interval=0)